{"version":3,"sources":["context/TodoContext.js","context/action.types.js","context/reducer.js","Components/TodoForm.js","Components/Todos.js","App.js","serviceWorker.js","index.js"],"names":["TodoContext","createContext","ADD_TODO","REMOVE_TODO","state","action","type","payload","filter","todo","id","TodoForm","useState","todoString","setTodoString","dispatch","useContext","Form","onSubmit","e","preventDefault","alert","v4","FormGroup","InputGroup","Input","name","placeholder","value","onChange","target","InputGroupAddon","addonType","Button","color","Todos","todos","ListGroup","className","map","ListGroupItem","onClick","App","useReducer","todoReducer","Provider","Container","fluid","src","alt","width","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iOAEaA,G,YAAcC,2B,QCFdC,EAAW,WACXC,EAAc,cCCZ,WAACC,EAAOC,GACnB,OAAQA,EAAOC,MAGX,KAAKJ,EACL,MAAM,GAAN,mBAAWE,GAAX,CAAkBC,EAAOE,UACzB,KAAKJ,EACL,OAAOC,EAAMI,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAOL,EAAOE,WAE/C,QACA,OAAOH,I,+DCiDAO,EA/CE,WACf,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACQC,EAAaC,qBAAWhB,GAAxBe,SAoBR,OACE,cAACE,EAAA,EAAD,CAAMC,SAnBa,SAAAC,GAEnB,GADAA,EAAEC,iBACiB,KAAfP,EACF,OAAOQ,MAAM,uBAGf,IAAMZ,EAAO,CACXI,aACAH,GAAIY,eAENP,EAAS,CACPT,KAAMJ,EACNK,QAASE,IAGXK,EAAc,KAId,SACE,cAACS,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEnB,KAAK,OACLoB,KAAK,OACLhB,GAAG,OACHiB,YAAY,WACZC,MAAOf,EACPgB,SAAU,SAAAV,GAAC,OAAIL,EAAcK,EAAEW,OAAOF,UAExC,cAACG,EAAA,EAAD,CAAiBC,UAAU,UAA3B,SACE,cAACC,EAAA,EAAD,CACEC,MAAM,UADR,2B,wBClBGC,EAxBD,WACZ,MAA4BnB,qBAAWhB,GAA/BoC,EAAR,EAAQA,MAAOrB,EAAf,EAAeA,SAEf,OACE,cAACsB,EAAA,EAAD,CAAWC,UAAU,kBAArB,SACGF,EAAMG,KAAI,SAAA9B,GAAI,OACb,eAAC+B,EAAA,EAAD,WACG/B,EAAKI,WACN,sBACE4B,QAAS,WACP1B,EAAS,CACPT,KAAMH,EACNI,QAASE,EAAKC,MAJpB,SAQE,cAAC,IAAD,QAVgBD,EAAKC,UCgBlBgC,EAnBH,WACV,MAA0BC,qBAAWC,EAAa,IAAlD,mBAAOR,EAAP,KAAcrB,EAAd,KACA,OACE,cAACf,EAAY6C,SAAb,CAAsBjB,MAAO,CAAEQ,QAAOrB,YAAtC,SACE,eAAC+B,EAAA,EAAD,CAAWC,OAAK,EAAhB,UAEE,qBAAKrC,GAAG,UAAR,SACI,qBAAKsC,IAAM,4FAA4FC,IAAI,eAAeC,MAAM,KAAKC,OAAO,SAGhJ,2DACA,cAAC,EAAD,IACA,cAAC,EAAD,UCVYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ff674315.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nexport const TodoContext = createContext();\n","export const ADD_TODO = \"ADD_TODO\";\nexport const REMOVE_TODO = \"REMOVE_TODO\";\n","import { ADD_TODO, REMOVE_TODO } from \"./action.types\";\n\nexport default (state, action) => {\n    switch (action.type)\n    {\n      \n        case ADD_TODO:\n        return [...state, action.payload];\n        case REMOVE_TODO:\n        return state.filter(todo => todo.id !== action.payload);\n\n        default:\n        return state;\n  }\n};\n","import React, { useState, useContext } from \"react\";\nimport {\n  FormGroup,\n  Input,\n  Button,\n  Form,\n  InputGroup,\n  InputGroupAddon\n} from \"reactstrap\";\n\nimport { v4 } from \"uuid\";\nimport { TodoContext } from \"../context/TodoContext\";\nimport { ADD_TODO } from \"../context/action.types\";\n\nconst TodoForm = () => {\n  const [todoString, setTodoString] = useState(\"\");\n  const { dispatch } = useContext(TodoContext);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (todoString === \"\") {\n      return alert(\"Please enter a todo\");\n    }\n\n    const todo = {\n      todoString,\n      id: v4()\n    };\n    dispatch({\n      type: ADD_TODO,\n      payload: todo\n    });\n\n    setTodoString(\"\");\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <FormGroup>\n        <InputGroup>\n          <Input\n            type=\"text\"\n            name=\"todo\"\n            id=\"todo\"\n            placeholder=\"Add Todo\"\n            value={todoString}\n            onChange={e => setTodoString(e.target.value)}\n          />\n          <InputGroupAddon addonType=\"prepend\">\n            <Button\n              color=\"primary\"\n            >\n              Add\n            </Button>\n          </InputGroupAddon>\n        </InputGroup>\n      </FormGroup>\n    </Form>\n  );\n};\n\nexport default TodoForm;\n","import React, { useContext } from \"react\";\nimport { ListGroup, ListGroupItem } from \"reactstrap\";\nimport { FaCheckDouble } from \"react-icons/fa\";\nimport { TodoContext } from \"../context/TodoContext\";\nimport { REMOVE_TODO } from \"../context/action.types\";\nimport \"../App.css\"\n\nconst Todos = () => {\n  const { todos, dispatch } = useContext(TodoContext);\n\n  return (\n    <ListGroup className=\"mt-5 mb-2 items\">\n      {todos.map(todo => (\n        <ListGroupItem key={todo.id}>\n          {todo.todoString}\n          <span\n            onClick={() => {\n              dispatch({\n                type: REMOVE_TODO,\n                payload: todo.id\n              });\n            }}\n          >\n            <FaCheckDouble />\n          </span>\n        </ListGroupItem>\n      ))}\n    </ListGroup>\n  );\n};\n\nexport default Todos;\n","import React, { useReducer } from \"react\";\nimport { Container } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport { TodoContext } from \"./context/TodoContext\";\nimport todoReducer from \"./context/reducer\";\nimport TodoForm from \"./Components/TodoForm\";\nimport Todos from \"./Components/Todos\";\n\nconst App = () => {\n  const [todos, dispatch] = useReducer(todoReducer, []);\n  return (\n    <TodoContext.Provider value={{ todos, dispatch }}>\n      <Container fluid>\n\n        <div id=\"img-div\">\n            <img src = \"https://learnyst.s3.amazonaws.com/assets/schools/2410/resources/images/logo_lco_t17sd.png\" alt=\"lco-app-logo\" width=\"50\" height=\"50\" />\n        </div>\n        \n        <h1>Todo App with Context API</h1>\n        <TodoForm />\n        <Todos />\n        \n      </Container>\n    </TodoContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}